branch: actions-onboarding
commit-message: 'ci: onboarding to actions'
author-email: 149130343+josh-issueops-bot[bot]@users.noreply.github.com
author-name: josh-issueops-bot[bot]
pr-title: Onboarding to GitHub Actions
pr-body: |
  ## What is this? 
  This pull request was created by the GitHub Actions Onboarding workflow.
  
  It does a bunch of stuff, including:
  - Adds a new workflow to the repository

  ## Next Steps
  
  Things you need to do in order to complete the onboarding

  - [ ] Add any secrets that are required for the workflow to run to Vault
  - [ ] Review the workflow and make any necessary changes
  - [ ] Convert any other workflows from Jenkins to GitHub Actions that are required for this repository

  When you are happy with the changes, please merge this pull request.

  ## Sample Copilot Prompt for Workflow Conversions
  
  <details>
  <summary>Expand for a sample Copilot prompt we customized</summary>
  <br>

  ```
  I need to create a GitHub Actions workflow for my repository. Here are the standards and requirements for the workflow:

  1. **Workflow Name**: The workflow should have a descriptive name that reflects its purpose (e.g., "Build and Test", "Deploy to Production").
  2. **Triggers**:
    - The workflow should trigger on `push` to the `main` branch.
    - It should also trigger on `pull_request` events targeting the `main` branch.
  3. **Environment Matrix**:
    - The workflow should support a matrix of environments (e.g., Node.js versions, Python versions, etc.).
    - For example, if it's a Node.js project, test against Node.js versions `14`, `16`, and `18`.
  4. **Steps**:
    - Checkout the repository using `actions/checkout@v3`.
    - Set up the required environment (e.g., Node.js, Python, Docker, etc.).
    - Install dependencies using the appropriate package manager (e.g., `npm install`, `pip install -r requirements.txt`).
    - Run tests using the standard testing framework for the language (e.g., `npm test`, `pytest`).
    - If applicable, build the project (e.g., `npm run build`).
  5. **Secrets and Environment Variables**:
    - Use secrets stored in GitHub Actions (e.g., `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`) for secure operations.
    - Use environment variables for configuration where applicable.
  6. **Artifacts**:
    - If the workflow generates build artifacts, upload them using `actions/upload-artifact@v3`.
  7. **Notifications**:
    - Notify the team on Slack or via email if the workflow fails.
  8. **Error Handling**:
    - Ensure the workflow fails gracefully with clear error messages.
  ```
  </details>
assignees:
  - joshjohanning
# merge types in order of preference, in case one is not available
merge-type:
  - squash
  - merge
  - rebase
plain-output: true
conflict-strategy: replace
