name: new-repo-create

run-name: 'ðŸš€ Actions onboarding create: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issue_comment:
    types: [created]

jobs:
  reusable-workflow-onboarder-create:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/onboard-to-actions') &&
      contains(github.event.issue.labels.*.name, 'actions'))
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Write GitHub context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/reusable-workflow-onboarder.yml

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Set env vars
        run: | 
          echo "REPO_NAME=${{ steps.issue-parser.outputs.issueparser_repo_name }}" >> $GITHUB_ENV
          echo "REPO_LANGUAGE=${{ steps.issue-parser.outputs.issueparser_repo_language }}" >> $GITHUB_ENV
          echo "OTHER_CONFIGURATION=${{ steps.issue-parser.outputs.issueparser_other_configuration }}" >> $GITHUB_ENV

      # doing this again in case someone else renamed the issue
      - name: Rename issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `title: `ðŸš€ Actions onboarding: ${process.env.REPO_NAME}``
            })

      # TODO: modify YAML file accordingly
      # TODO: create branch
      # TODO: create tree/commit/push to branch
      # TODO: create pull request - include any TODOs remaining for user (and tag them in the PR / add as an assignee)
      # TODO: provide link to PR back as a comment in the issue created here

      - name: Add created label and close issue
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ["created", "new-repo"],
              state: "closed"
            })

      # TODO: extract the pull request ID and add to the URL
      - name: Post successful message
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            let commentBody
            commentBody = `ðŸš€ Actions onboarding pull request created.

            Visit the following link for the pull request: [https://github.com/${{ env.REPO_NAME }}/pull/$VARIABLE)
            `

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })

      - name: Post failure message
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            let commentBody
            commentBody = `ðŸ˜¢ The onboarding to Actions workflow failed. Please review the [action logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })
