name: reusable-workflow-onboarder-create

run-name: 'ðŸš€ Actions onboarding create: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issue_comment:
    types: [created]

jobs:
  reusable-workflow-onboarder-create:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/onboard-to-actions') &&
      contains(github.event.issue.labels.*.name, 'actions'))
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Write GitHub context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/reusable-workflow-onboarder.yml

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      # setting as env variables to avoid potential script injection
      - name: Set env vars
        run: |
          echo "BUSINESS_UNIT=${{ steps.issue-parser.outputs.issueparser_business_unit }}" >> $GITHUB_ENV
          echo "REPO_LANGUAGE=${{ steps.issue-parser.outputs.issueparser_repo_language }}" >> $GITHUB_ENV
          echo "OTHER_CONFIGURATION=${{ steps.issue-parser.outputs.issueparser_other_configuration }}" >> $GITHUB_ENV

      # doing this again in case someone else renamed the issue
      - name: Rename issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // Get current date in YYYY-MM-DD format
            const today = new Date();
            const formattedDate = today.toISOString().split('T')[0];
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `ðŸš€ Actions onboarding: ${process.env.BUSINESS_UNIT} (${formattedDate})`
            })

      # TODO: modify YAML file accordingly (for the reusable workflow)
      # TODO: create branch on the target repo
      # TODO: create tree/commit/push to branch (using git commands locally or the GitHub API)
      # TODO: create pull request - include any TODOs remaining for user (and tag them in the PR / add as an assignee)
      # TODO: provide link to PR back as a comment in the issue created here
      # TODO: ceate a Copilot custom instructions file and PR it the repo also? `.github/copilot-instructions.md`


      - name: download and install multi-gitter
        run: |
          curl -s https://raw.githubusercontent.com/lindell/multi-gitter/master/install.sh | sh
          multi-gitter version

      - name: Build multi-gitter config
        uses: actions/github-script@v7
        env:
          REPOSITORIES: ${{ steps.issue-parser.outputs.issueparser_repositories }}
        with:
          script: |
            const fs = require('fs');
            const repositories = process.env.REPOSITORIES.split(',').map(repo => repo.trim());
            const configContent = `repo:\n` + repositories.map(repo => `  - ${repo}`).join('\n');
            fs.writeFileSync('multi-gitter-config.yml', configContent);

      - name: print config
        run: cat multi-gitter-config.yml

      # - name: run multi-gitter
      #   run: |
      #     multi-gitter run \
      #       --repo "${{ steps.issue-parser.outputs.issueparser_repositories }}" \
      #       --branch "actions-onboarding" \
      #       --message "Onboarding to Actions" \
      #       --template .github/workflows/reusable-workflow-onboarder-prepare.yml \
      #       --config .github/multi-gitter-config.yml
      #       --config-branch "actions-onboarding" \
      #       --config-message "Onboarding to Actions"

      # - name: Add created label and close issue
      #   if: ${{ success() }}
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ steps.app-token.outputs.token }}
      #     script: |
      #       await github.rest.issues.update({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         labels: ["created", "actions"],
      #         state: "closed"
      #       })

      # TODO: extract the pull request ID and add to the URL
      - name: Post successful message
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            let commentBody
            commentBody = `ðŸš€ Actions onboarding pull request created.

            // Visit the following link for the [pull request](https://github.com/${{ env.REPO_NAME }}/pull/$VARIABLE)
            `

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })

      - name: Post failure message
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            let commentBody
            commentBody = `ðŸ˜¢ The onboarding to Actions workflow failed. Please review the [action logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })
