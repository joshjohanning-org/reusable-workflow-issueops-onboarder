name: reusable-workflow-onboarder-close

run-name: 'ðŸš€ Actions onboarding close: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issue_comment:
    types: [created]

jobs:
  reusable-workflow-onboarder-create:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '.close') &&
      contains(github.event.issue.labels.*.name, 'actions'))
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Write GitHub context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/reusable-workflow-onboarder.yml

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: checkout reusable workflow repo
        uses: actions/checkout@v4
        with:
          repository: joshjohanning-org/reusable-workflows
          token: ${{ steps.app-token.outputs.token }}
          path: reusable-workflows

      # setting as env variables to avoid potential script injection
      - name: Set env vars
        run: |
          echo "BUSINESS_UNIT=${{ steps.issue-parser.outputs.issueparser_business_unit }}" >> $GITHUB_ENV
          echo "REPO_LANGUAGE=${{ steps.issue-parser.outputs.issueparser_repo_language }}" >> $GITHUB_ENV
          echo "OTHER_CONFIGURATION=${{ steps.issue-parser.outputs.issueparser_other_configuration }}" >> $GITHUB_ENV

      # doing this again in case someone else renamed the issue
      - name: Rename issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // Get current date in YYYY-MM-DD format
            const today = new Date();
            const formattedDate = today.toISOString().split('T')[0];
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `ðŸš€ Actions onboarding: ${process.env.BUSINESS_UNIT} (${formattedDate})`
            })

      - name: download and install multi-gitter
        run: |
          curl -s https://raw.githubusercontent.com/lindell/multi-gitter/master/install.sh | sh
          multi-gitter version

      - name: Build multi-gitter config
        uses: actions/github-script@v7
        env:
          REPOSITORIES: ${{ steps.issue-parser.outputs.issueparser_repositories }}
        with:
          script: |
            const fs = require('fs');

            // Build the multi-gitter-config-repos.yml file
            const repositories = process.env.REPOSITORIES.split('\n').map(repo => repo.trim()).filter(repo => repo !== '');
            const reposConfigContent = `\nrepo:\n` + repositories.map(repo => `  - ${repo}`).join('\n');
            fs.writeFileSync('multi-gitter-config-repos.yml', reposConfigContent);

            // Append the contents of multi-gitter-config-repos.yml to multi-gitter-config.yml
            const reposConfig = fs.readFileSync('multi-gitter-config-repos.yml', 'utf8');
            fs.appendFileSync('multi-gitter-config.yml', reposConfig);

      - name: print config
        run: cat multi-gitter-config.yml

      - name: run multi-gitter close
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          multi-gitter close \
            --branch actions-onboarding-${{ github.event.issue.number }} \
            --config ./multi-gitter-config.yml 2>&1 | tee multi-gitter.log

      - name: print run log
        run: cat multi-gitter.log

      # - name: Add created label and close issue
      #   if: ${{ success() }}
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ steps.app-token.outputs.token }}
      #     script: |
      #       await github.rest.issues.update({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         labels: ["created", "actions"],
      #         state: "closed"
      #       })

      - name: Post status message
        uses: actions/github-script@v7
        if: ${{ success() }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const fs = require('fs');

            // Read the contents of the multi-gitter.log file
            const runLog = fs.readFileSync('./multi-gitter.log', 'utf8');

            // Parse the log for lines with msg= (excluding summary lines like "Closing 2 pull requests")
            const logLines = runLog.split('\n').filter(line => 
              line.includes('msg=') && 
              !line.includes('pull requests')
            );

            // Format the lines
            const formattedLines = logLines.map(line => {
              // Extract everything after msg=
              const msgContent = line.split('msg=')[1].trim();
              
              // Check if this is a PR line (contains repo name and PR number)
              if (msgContent.includes('pr=')) {
                const match = msgContent.match(/pr="(.+?)\s+#(\d+)"/);
                if (match) {
                  const repo = match[1].trim();
                  const prNumber = match[2].trim();
                  return `- ${msgContent.replace(/pr="(.+?)\s+#(\d+)"/, `https://github.com/${repo}/pull/${prNumber}`)}`; 
                }
              }
              
              // For any other message types, just add a bullet
              return `- ${msgContent}`;
            });

            // Construct the comment body
            let commentBody = `ðŸ™… Actions onboarding pull request(s) closed:\n\n`;
            commentBody += formattedLines.join('\n');
            commentBody += `\n\n_See the [action logs](${{ github.SERVER_URL }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information._\n\n`;

            // Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Post failure message
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            let commentBody
            commentBody = `ðŸ˜¢ The onboarding to Actions workflow failed. Please review the [action logs](${{ github.SERVER_URL }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })

      - name: publish config
        uses: actions/upload-artifact@v4
        with:
          name: multi-gitter-config
          path: multi-gitter-config.yml
