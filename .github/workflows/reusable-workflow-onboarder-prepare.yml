name: reusable-workflow-onboarder-prepare

run-name: 'ðŸš€ Actions onboarding prepare: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issues:
    types: [opened]

jobs:
  reusable-workflow-onboarder-prepare:
    name: Prepare Migration
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' &&
      (github.event.action == 'opened') &&
      contains(github.event.issue.labels.*.name, 'actions')
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Write GitHub context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/reusable-workflow-onboarder.yml

      # setting as env variables to avoid potential script injection
      - name: Set env vars
        run: |
          echo "BUSINESS_UNIT=${{ steps.issue-parser.outputs.issueparser_business_unit }}" >> $GITHUB_ENV
          echo "REPOSITORIES=${{ steps.issue-parser.outputs.issueparser_repositories }}" >> $GITHUB_ENV
          echo "REPO_LANGUAGE=${{ steps.issue-parser.outputs.issueparser_repo_language }}" >> $GITHUB_ENV
          echo "OTHER_CONFIGURATION=${{ steps.issue-parser.outputs.issueparser_other_configuration }}" >> $GITHUB_ENV

      - name: Rename issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // Get current date in YYYY-MM-DD format
            const today = new Date();
            const formattedDate = today.toISOString().split('T')[0];
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `ðŸš€ Actions onboarding: ${process.env.BUSINESS_UNIT} (${formattedDate})`
            })

      - name: Post prepare message
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const numberOfRepositories = process.env.REPOSITORIES.trim().split('\n').length

            let commentBody
            commentBody = `ðŸ‘‹ Thank you for opening this new repo issue, @${{ github.actor }}.

            The following **${numberOfRepositories} repositories** have been parsed from your issue body:
          
            \`\`\`
            ${{ env.REPOSITORIES }}
            \`\`\`

            - The **business unit** is set to be: **\`${{ env.BUSINESS_UNIT }}\`**
            - The **repo language** is set to be: **\`${{ env.REPO_LANGUAGE }}\`**
            - The **other configuration** setting is set to be: **\`${{ env.OTHER_CONFIGURATION }}\`**

            ## Onboard to Actions

            Add the following comment to this issue in order to start the onboarding process onto Actions:
          
            \`\`\`
            /onboard-to-actions
            \`\`\`
            
            This will configure a workflow for you and create a pull request in the repository you have selected. After running, any follow-up requirements will be provided to you in the linked pull request!
            
            `

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })
            
      - name: Post failure message
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            let commentBody
            commentBody = `ðŸ˜¢ The issue body could not be parsed, @${{ github.actor }}. Please open a new issue using the issue template and ensure your formatting and line spacing remains untouched.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody.replace(/  +/g, '')
            })
